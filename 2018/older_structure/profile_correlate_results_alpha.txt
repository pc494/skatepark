Timer unit: 1e-06 s

Total time: 0.00024 s
File: profile_correlate.py
Function: correlate_danger at line 24

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    24                                           @profile
    25                                           def correlate_danger(image, pattern,
    26                                                         include_direct_beam=False,
    27                                                         sim_threshold=1e-5,
    28                                                         interpolate=False,
    29                                                         **kwargs):
    30         1          3.0      3.0      1.2      shape = image.shape
    31         1         10.0     10.0      4.2      half_shape = tuple(i // 2 for i in shape)
    32         1         51.0     51.0     21.2      mask = np.abs(pattern.coordinates[:,2]) < 1e-2
    33         1        111.0    111.0     46.2      pixel_coordinates = np.rint(pattern.calibrated_coordinates[:,:2]+half_shape).astype(int)
    34         1         13.0     13.0      5.4      image_intensities = image[pixel_coordinates[:, 0][mask], pixel_coordinates[:, 1][mask]]
    35         1         36.0     36.0     15.0      pattern_intensities = pattern.intensities[mask]
    36         1         16.0     16.0      6.7      return np.dot(image_intensities,pattern_intensities)/np.sqrt(np.dot(pattern_intensities,pattern_intensities))

Total time: 0.003811 s
File: profile_correlate.py
Function: correlate_safer at line 38

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    38                                           @profile
    39                                           def correlate_safer(image, pattern,
    40                                                         include_direct_beam=False,
    41                                                         sim_threshold=1e-5,
    42                                                         interpolate=False,
    43                                                         **kwargs):
    44         1          6.0      6.0      0.2      shape = image.shape
    45         1         13.0     13.0      0.3      half_shape = tuple(i // 2 for i in shape)
    46         1         94.0     94.0      2.5      in_bounds_z = np.abs(pattern.coordinates[:,2]) < 1e-2
    47                                               
    48         1        138.0    138.0      3.6      pixel_coordinates = np.rint(pattern.calibrated_coordinates[:,:2]+half_shape).astype(int)
    49         1         36.0     36.0      0.9      in_bounds = np.product((pixel_coordinates > 0)*(pixel_coordinates < shape[0]), axis=1)
    50                                           
    51         1         35.0     35.0      0.9      pattern_intensities = pattern.intensities
    52         1          5.0      5.0      0.1      large_intensities = pattern_intensities > sim_threshold
    53         1          9.0      9.0      0.2      mask = np.logical_and(in_bounds_z,np.logical_and(in_bounds, large_intensities))
    54         1         14.0     14.0      0.4      image_intensities = image[pixel_coordinates[:, 0][mask], pixel_coordinates[:, 1][mask]]
    55                                               
    56         1          4.0      4.0      0.1      pattern_intensities = pattern_intensities[mask]
    57         1          8.0      8.0      0.2      numerator = np.dot(image_intensities,pattern_intensities)
    58         1       3317.0   3317.0     87.0      denominator = np.sqrt(np.dot(pattern_intensities,pattern_intensities)*np.sum(np.dot(image,image)))
    59                                               
    60         1        132.0    132.0      3.5      return np.nan_to_num(numerator/denominator)

